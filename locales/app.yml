_version: 2
app:
  name:
    en: Long night of sciences
    de: Lange Nacht der Wissenschaften
  english:
    en: English
    de: Englisch
  german:
    en: German
    de: Deutsch
  tools:
    en: Tools
    de: Fenster
  optimizations:
    en: Optimizations
    de: Optimierungen
  organize:
    en: Organize windows
    de: Fenster ordnen
  reset:
    en: Reset egui memory
  forget:
    en: Forget scroll, positions, sizes etc
output:
  unopt:
    en: Unoptimized output
    de: Unoptimierter Ausgabe
  opt:
    en: Optimized output
    de: Optimierter Ausgabe
  empty:
    en: Assembly output will be here
    de: Die Assembler-Ausgabe wird hier erscheinen
  time:
    en: "Total time: %{t} sec"
    de: "Gesamtdauer: %{t} s"
  result:
    en: Program result is %{res}
    de: Ergebnis ist %{res}
  registers:
    en: Registers
    de: Registern
  ram:
    en: Main memory
    de: Hauptspeicher
  ram.cell:
    en: Cell
    de: Zelle
  ram.content:
    en: Content
    de: Inhalt
  executing:
    en: Currently executing
    de: Wird gerade ausgef√ºhrt
editor:
  name:
    en: üñÆ Code Editor
    de: üñÆ Code-Editor
  explain:
    en: You can write your expressions in this TextEdit box.
    de: In dieses Textfeld k√∂nnen Sie einen Ausdruck schreiben.
  constant_folding:
    en: Constant folding
    de: Konstantenfaltung
  cache_opt:
    en: Cache optimization
    de: Cache-Optimierung
  common_factor_elimination:
    en: Common Factor Extraction
    de: Faktorisierung
  replace_mul_with_shift:
    en: Replace factors with bitshifts
    de: Ersetze Faktoren durch Bit-Verschiebung
  compile:
    en: Compile!
    de: Kompilieren!
  run:
    en: Run!
    de: Ausf√ºhren!
  run.alt:
    en: You can alternatively press CTRL+Enter to compile and run
    de: Alternativ k√∂nnen Sie CTRL+Enter dr√ºcken, um zu kompilieren und auszuf√ºhren
  clear:
    en: Clear
    de: L√∂schen
  inputs:
    en: "Input variables:"
    de: "Eingabevariablen:"
compiler:
  error:
    divzero:
      en: attempted division by zero
      de: versuchte Division durch Null
    unknownvar:
      en: unknown variable
      de: unbekannte Variable `%{v}`
    invalid_unary:
      en: invalid unary operator `%{op}`
      de: ung√ºltiger un√§rer Operator `%{op}`
    empty_var:
      en: no value given for variable %{v}
      de: kein Wert f√ºr Variable %{v} angegeben
    nan_var:
      en: variable %{var}'s value `%{val}` is not a number
      de: der Wert der Variablen %{var} `%{val}` ist keine Zahl
  inst:
    add:
      en: add register %{a} to register %{b}
      de: Register %{a} zu Register %{b} addieren
    sub:
      en: subtract register %{a} from register %{b}
      de: Register %{a} von Register %{b} subtrahieren
    mul:
      en: multiply register %{a} by register %{b}
      de: Register %{a} mit Register %{b} multiplizieren
    div:
      en: divide register %{a} by register %{b}
      de: Register %{a} durch Register %{b} dividieren
    shl:
      en: shift value in register %{a} left by value in register %{b}
      de: Register %{a} um Register %{b} nach links schieben
    shr:
      en: shift value in register %{a} right by value in register %{b}
      de: Register %{a} um Register %{b} nach rechts schieben
    store:
      en: store the number %{n} in register %{r}
      de: die Zahl %{n} im Register %{r} speichern
    transfer:
      en: transfer variable %{v} to register %{r}
      de: √ºbertragen der Variablen %{v} in das Register %{r}
    result:
      en: the result is in register %{r}
      de: das Ergebnis steht im Register %{r}
    write:
      en: write register %{r} to main memory (cell %{addr})
      de: Register %{r} in den Hauptspeicher schreiben (Zelle %{addr})
    load:
      en: load main memory cell %{addr} into register %{r}
      de: Laden der Hauptspeicherzelle %{addr} in das Register %{r}
interp_opts:
  name:
    en: Interpreter options
    de: Interpreter-Optionen
  label:
    en: These are the settings for the Interpreter executing the code. Change them and see how the compile results change with more or less cache lines or registers.
    de: Dies sind die Einstellungen f√ºr den Interpreter, der den Code ausf√ºhrt. √Ñndern Sie sie und sehen Sie, wie sich die Kompilierergebnisse mit mehr oder weniger Cache-Zeilen oder Registern √§ndern.
  explanation:
    en: Explanation
    de: Erl√§uterung
  n_regs:
    en: Register count
    de: Anzahl der Registern
  label_regs:
    en: A computer processor can remember a fixed number of things. They work like post-its on your monitor. There's space for a few and you have them always ready.
    de: Ein Computerprozessor kann sich eine bestimmte Anzahl von Dingen merken. Sie funktionieren wie Post-its auf dem Monitor. Da ist Platz f√ºr ein paar und man hat sie immer parat.
  cache_size:
    en: Cache size
    de: Cache-Gr√∂√üe
  cache_label:
    en: If all registers are full, computers have larger storages, called caches. While they're bigger, they're also slower to access. Think of them like big binders of files. They can hold a lot of paper, but finding a specific page takes time.
    de: Wenn alle Register voll sind, haben Computer gr√∂√üere Speicher, die so genannten Caches. Sie sind zwar gr√∂√üer, aber der Zugriff auf sie ist auch langsamer. Stellen Sie sich diese Speicher wie gro√üe Aktenordner vor. Sie k√∂nnen eine Menge Papier aufnehmen, aber das Auffinden einer bestimmten Seite braucht Zeit.
examples:
  name:
    en: Examples
    de: Beispiele
  use:
    en: Use this!
    de: Ausprobieren!
  shift_mul:
    title:
      en: Cheaper Multiplication
      de: Schnelles Multiplizieren
    desc:
      en: Some multiplications are much easier for us than others. Take 16 * 10 for example. You immediately know that you only need to add a 0 at the end. It's the same for computers. But since their math works slightly different, with 1s and 0s, they can do the same trick with numbers that are a power of 2.
      de: Manche Multiplikationsaufgaben sind f√ºr uns einfacher als andere. 16 * 10 zum Beispiel. Du wei√üt sofort, dass du nur eine Null am Ende anh√§ngen musst. Bei Computern ist das genau so. Aber weil sie ein bisschen anders rechnen als wir, n√§mlich mit Einsen und Nullen, k√∂nnen sie den gleichen Trick nur mit Zahlen, die eine Potenz von 2 sind, anwenden.
